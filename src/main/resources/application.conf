akka {

  loglevel = DEBUG

  actor {
    provider = cluster

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "com.google.protobuf.Message" = proto
      "ua.levkuts.akka.graph.db.engine.JacksonJsonSerializable" = jackson-json
    }
  }

  serialization.jackson {
    jackson-modules += "ua.levkuts.akka.graph.db.engine.serialization.RelationDirectionJacksonModule"
  }

  persistence {
    cassandra {
      meta-in-events-by-tag-view = off
      journal {
        keyspace-autocreate = true
        tables-autocreate = true
      }

      snapshot {
        keyspace-autocreate = true
        tables-autocreate = true
      }
    }

    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
  }

  remote {
    log-remote-lifecycle-events = on

    artery.canonical {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    seed-nodes = ["akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}]

    roles = [${clustering.node-role}]
  }
}

datastax-java-driver {
  basic {
    load-balancing-policy.local-datacenter = "datacenter1"
    contact-points = [${cassandra.host}":"${cassandra.port}]
  }
  advanced.reconnect-on-init = true
}

cassandra {
  host = "127.0.0.1"
  host = ${?CASSANDRA_HOST}
  port = 9042
  port = ${?CASSANDRA_PORT}
}

slick-postgres-graph-db {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://"${postgres.host}"/graph-db"
      user = "postgres"
      password = "postgres"
    }
  }
}

postgres {
  host = "localhost"
  host = ${?POSTGRES_HOST}
}

event-processor {
  id = "GraphNodeEventProcessor"
  keep-alive-interval = 2 seconds
  tag-prefix = "nodes-slice"
  parallelism = 4
}

clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}
  port = 1600
  port = ${?CLUSTER_PORT}
  http-port = 8080
  http-port = ${?HTTP_PORT}
  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_IP}
  seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
  seed-port = 1600
  seed-port = ${?SEED_PORT_1600_TCP_PORT}
  node-role = "write-model"
  node-role = ${?NODE_ROLE}
  cluster.name = akka-graph-db
}